name: Build and Upload Executables

on:
  release:
    types:
      - published

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: powershell

      - name: Build executable
        run: pyinstaller --noconfirm --onefile scripts\build.py
        shell: powershell

      - name: Zip executable
        run: |
          if (-Not (Test-Path dist)) { Write-Error "dist folder does not exist!"; exit 1 }
          New-Item -ItemType Directory -Force dist_zip
          Compress-Archive -Path .\dist\* -DestinationPath .\dist_zip\myapp-windows.zip
        shell: powershell

      - name: Check zip files
        run: |
          if (-Not (Test-Path dist_zip)) { Write-Error "dist_zip folder not found!"; exit 1 }
          Get-ChildItem -Recurse dist_zip
        shell: powershell

      - name: Upload executable to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist_zip\myapp-windows.zip
          asset_name: myapp-windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-linux:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Build executable
        run: pyinstaller --noconfirm --onefile scripts/build.py
        shell: bash

      - name: Zip executable
        run: |
          mkdir -p dist_zip
          zip -r dist_zip/myapp-linux.zip dist/*
        shell: bash

      - name: Check zip files
        run: |
          if [ ! -d dist_zip ]; then
            echo "dist_zip folder not found!"
            exit 1
          fi
          ls -l dist_zip/
        shell: bash

      - name: Upload executable to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist_zip/myapp-linux.zip
          asset_name: myapp-linux.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-macos:
    needs: build-linux
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Build executable
        run: pyinstaller --noconfirm --onefile scripts/build.py
        shell: bash

      - name: Zip executable
        run: |
          mkdir -p dist_zip
          zip -r dist_zip/myapp-macos.zip dist/*
        shell: bash

      - name: Check zip files
        run: |
          if [ ! -d dist_zip ]; then
            echo "dist_zip folder not found!"
            exit 1
          fi
          ls -l dist_zip/
        shell: bash

      - name: Upload executable to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist_zip/myapp-macos.zip
          asset_name: myapp-macos.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
